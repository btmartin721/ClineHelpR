library("ClinePlotR")
devtools::load_all()
devtools::document()
devtools::document()
library("ClineHelpR")
devtools::load_all()
?partition_raster_bg
dataDIR <- ".../../../../clinehelpr_analysis/data/exampleData/ENMeval_bioclim"
devtools::load_all()
dataDIR <- ".../../../../clinehelpr_analysis/data/exampleData/ENMeval_bioclim"
envList <-
prepare_rasters(
raster.dir = file.path(dataDIR, "rasterLayers", "cropped"),
sample.file = file.path("exampleData",
"ENMeval_bioclim",
"localityInfo",
"sample_localities_maxent_southeast_noNA.csv"),
header = TRUE,
bb.buffer = 0.5,
plotDIR = file.path(dataDIR, "outputFiles", "plots")
)
bg <- partition_raster_bg(env.list = envList,
plotDIR = file.path(dataDIR,
"plots"))
# Saved to file and reloaded because rJava ran out of memory
saveRDS(bg, file = file.path(dataDIR, "Robjects", "bg.rds"))
saveRDS(envList, file = file.path(dataDIR, "Robjects", "envList.rds"))
envs.fg <- envList[[1]]
coords <- envList[[3]]
rm(envList)
gc()
bg <- readRDS(file.path(dataDIR, "Robjects", "bg.rds"))
# Give rJava more memory. Otherwise it will throw an error.
# Here, I used 24GB of RAM.
# Adjust based on your system.
options(java.parameters = "-Xmx24g")
# Run ENMeval.
# Adjust parameters as needed.
# See ENMeval vignette
eval.par <- runENMeval(envs.fg = envs.fg,
bg = bg, parallel = FALSE,
categoricals = 1,
partition.method = "checkerboard1",
coords = coords )
install.packages(c("ENMeval", "rJava"))
install.packages(c("ENMeval", "rJava"))
devtools::load_all()
dataDIR <- ".../../../../clinehelpr_analysis/data/exampleData/ENMeval_bioclim"
envList <-
prepare_rasters(
raster.dir = file.path(dataDIR, "rasterLayers", "cropped"),
sample.file = file.path("exampleData",
"ENMeval_bioclim",
"localityInfo",
"sample_localities_maxent_southeast_noNA.csv"),
header = TRUE,
bb.buffer = 0.5,
plotDIR = file.path(dataDIR, "outputFiles", "plots")
)
bg <- partition_raster_bg(env.list = envList,
plotDIR = file.path(dataDIR,
"plots"))
# Saved to file and reloaded because rJava ran out of memory
saveRDS(bg, file = file.path(dataDIR, "Robjects", "bg.rds"))
saveRDS(envList, file = file.path(dataDIR, "Robjects", "envList.rds"))
envs.fg <- envList[[1]]
coords <- envList[[3]]
rm(envList)
gc()
bg <- readRDS(file.path(dataDIR, "Robjects", "bg.rds"))
# Give rJava more memory. Otherwise it will throw an error.
# Here, I used 24GB of RAM.
# Adjust based on your system.
options(java.parameters = "-Xmx24g")
# Run ENMeval.
# Adjust parameters as needed.
# See ENMeval vignette
eval.par <- runENMeval(envs.fg = envs.fg,
bg = bg, parallel = FALSE,
categoricals = 1,
partition.method = "checkerboard1",
coords = coords )
envList <-
prepare_rasters(
raster.dir = file.path(dataDIR, "rasterLayers", "cropped"),
sample.file = file.path( dataDIR,
"localityInfo",
"sample_localities_maxent_southeast_noNA.csv"),
header = TRUE,
bb.buffer = 0.5,
plotDIR = file.path(dataDIR, "outputFiles", "plots")
)
bg <- partition_raster_bg(env.list = envList,
plotDIR = file.path(dataDIR,
"plots"))
envs.fg <- envList[[1]]
coords <- envList[[3]]
bg <- readRDS(file.path(dataDIR, "Robjects", "bg.rds"))
options(java.parameters = "-Xmx4g")
eval.par <- runENMeval(envs.fg = envs.fg,
bg = bg, parallel = FALSE,
categoricals = 1,
partition.method = "checkerboard1",
coords = coords )
?partitions
devtools::load_all()
devtools::load_all()
dataDIR <- ".../../../../clinehelpr_analysis/data/exampleData/ENMeval_bioclim"
envList <-
prepare_rasters(
raster.dir = file.path(dataDIR, "rasterLayers", "cropped"),
sample.file = file.path( dataDIR,
"localityInfo",
"sample_localities_maxent_southeast_noNA.csv"),
header = TRUE,
bb.buffer = 0.5,
plotDIR = file.path(dataDIR, "outputFiles", "plots")
)
bg <- partition_raster_bg(env.list = envList,
plotDIR = file.path(dataDIR,
"plots"))
# Saved to file and reloaded because rJava ran out of memory
saveRDS(bg, file = file.path(dataDIR, "Robjects", "bg.rds"))
saveRDS(envList, file = file.path(dataDIR, "Robjects", "envList.rds"))
envs.fg <- envList[[1]]
coords <- envList[[3]]
rm(envList)
gc()
bg <- readRDS(file.path(dataDIR, "Robjects", "bg.rds"))
# Give rJava more memory. Otherwise it will throw an error.
# Here, I used 24GB of RAM.
# Adjust based on your system.
options(java.parameters = "-Xmx4g")
# Run ENMeval.
# Adjust parameters as needed.
# See ENMeval vignette
eval.par <- runENMeval(envs.fg = envs.fg,
bg = bg, parallel = FALSE,
categoricals = 1,
partition.method = "checkerboard1",
coords = coords )
colnames(bg) <- c("lng", "lat")
eval.par <-
ENMeval::ENMevaluate(
occs = coords,
envs = envs.fg,
bg = bg,
tune.args = list(fc = feature.classes, rm = RMvalues),
partitions = partition.method,
parallel = parallel,
algorithm = algorithm,
categoricals = categoricals,
numCores = np
)
devtools::load_all()
options(java.parameters = "-Xmx4g")
bg <- readRDS(file.path(dataDIR, "Robjects", "bg.rds"))
eval.par <- runENMeval(envs.fg = envs.fg,
bg = bg,
parallel = FALSE,
categoricals = 1,
partition.method = "checkerboard1",
coords = coords)
View(envs.fg)
envs.fg <- envList[[1]]
envList <-
prepare_rasters(
raster.dir = file.path(dataDIR, "rasterLayers", "cropped"),
sample.file = file.path( dataDIR,
"localityInfo",
"sample_localities_maxent_southeast_noNA.csv"),
header = TRUE,
bb.buffer = 0.5,
plotDIR = file.path(dataDIR, "outputFiles", "plots")
)
View(envList)
envs.fg <- envList[[1]]
View(envs.fg)
coords <- envList[[3]]
bg <- readRDS(file.path(dataDIR, "Robjects", "bg.rds"))
eval.par <- runENMeval(envs.fg = envs.fg,
bg = bg,
parallel = FALSE,
categoricals = c("a_crop_nlcd2011_resampled"),
partition.method = "checkerboard1",
coords = coords)
gc()
rm()
