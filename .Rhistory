# Plot ideogram. this time, both.outlier.tests = TRUE
# This means that both outlier tests have to be significant to flag as outlier
# More conservative
ref.trans.info_bothOutlierTests <-
plot_outlier_ideogram(
prefix = paste0(prefix, "_bothOutlierTests"),
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = TRUE
)
# Write annotation information to file so it can be used later
write.table(
genes.annotated,
file = file.path(plotDIR, paste0(prefix, "_genesAnnotated.csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
# Write annotation information to file so it can be used later
write.table(
ref.trans.info,
file = file.path(plotDIR, paste0(prefix, "_refTransInfo.csv")),
quote = TRUE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
library("ClinePlotR")
getwd()
# Set working directory here
# Mean annual solar radiation; https://worldclim.org
setwd("exampleData/ENMeval_bioclim/rasterLayers/original/wc2.1_30s_srad/")
library("raster")
library("rgdal")
# Load into raster stack
solar.files <- list.files(pattern = "*.tif", full.names = TRUE)
solar.rad <- raster::stack(solar.files)
# Wind speed for each of 12 months; found at https://worldclim.org;
setwd("exampleData/ENMeval_bioclim/rasterLayers/original/wc2.1_30s_wind/")
setwd("../wc2.1_30s_wind/")
wind.files <- list.files(pattern = "*.tif", full.names = TRUE)
wind <- raster::stack(wind.files)
# Calculate annual means
solar.mean <- raster::calc(solar.rad, fun = mean, na.rm = TRUE)
wind.mean <- raster::calc(wind, fun = mean, na.rm = TRUE)
setwd("../../../../../")
samples <-
read.csv(
"exampleData/ENMeval_bioclim/localityInfo/sample_localities_maxent_southeast.csv",
header = TRUE,
stringsAsFactors = FALSE
)
getwd()
library("ClinePlotR")
rasterDIR <- "exampleData/ENMeval_bioclim/"
dataDIR <- "exampleData/introgress"
envList <- readRDS("exampleData/ENMeval_bioclim/Robjects/envList.rds")
rasterPoint.list <- extractPointValues(envList)
eatt <- runIntrogress(
p1.file = file.path(dataDIR, "inputFiles", "EATT_p1data.txt"),
p2.file = file.path(dataDIR, "inputFiles", "EATT_p2data.txt"),
admix.file = file.path(dataDIR, "inputFiles", "EATT_admix.txt"),
loci.file = file.path(dataDIR, "inputFiles", "EATT_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "inputFiles", "eatt_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "eatt"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "clines"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
getwd()
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "clines"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
warnings()
setwd("ClinePlotR/")
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::clean_vignettes()
setwd("D:/scripts/ClinePlotR")
devtools::clean_vignettes()
devtools::clean_vignettes("."
)
install.packages("attachment")
install.packages("packrat")
packrat::unused_packages(project = ".")
packrat::unused_packages(project = ".", lib.loc = "bayestestR")
setwd("D:/scripts/ClinePlotR")
devtools::document()
install.packages("bayestestR")
install.packages("RIdeogram")
install.packages("devtools")
install.packages("devtools")
install.packages(c("ade4", "adegenet", "ape", "arm", "backports", "BDgraph", "BH", "BiocManager", "bit", "bit64", "bitops", "blob", "brio", "broom", "calibrate", "callr", "car", "carData", "checkmate", "ClassDiscovery", "classInt", "cli", "clipr", "cluster", "clusterGeneration", "coda", "colorspace", "conStruct", "corpcor", "covr", "cowplot", "cpm", "crayon", "crosstalk", "curl", "data.table", "DBI", "deldir", "dendextend", "deSolve", "diffobj", "digest", "dismo", "diversitree", "doParallel", "dplyr", "e1071", "egg", "ellipse", "ellipsis", "ENMeval", "expm", "factoextra", "FactoMineR", "fansi", "farver", "fastmap", "fastmatch", "fdrtool", "foghorn", "forcats", "foreach", "Formula", "fs", "fst", "future", "gap", "gdistance", "gdtools", "geiger", "generics", "genetics", "gert", "GGally", "ggdendro", "ggforce", "ggimage", "ggplot2", "ggplotify", "ggpubr", "ggrepel", "ggsignif", "ggthemes", "git2r", "glasso", "globals", "glue", "gmailr", "gplots", "gridGraphics", "gtools", "haven", "hexbin", "hierfstat", "highlight", "highr", "hisse", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "hunspell", "igraph", "inline", "iterators", "jomo", "jpeg", "jsonlite", "kableExtra", "kernlab", "knitr", "labeling", "later", "lavaan", "leaflet", "leaps", "lemon", "lintr", "listenv", "lme4", "lmtest", "logistf", "loo", "lwgeom", "magick", "magrittr", "mapproj", "maptools", "markdown", "MASS", "matrixcalc", "MatrixModels", "matrixStats", "maxnet", "mclust", "mcmc", "memuse", "mice", "mime", "mitml", "mnormt", "mockery", "multcomp", "mvtnorm", "network", "nloptr", "oompaBase", "openssl", "openxlsx", "optparse", "ordinal", "packrat", "parsedate", "pbapply", "pbkrtest", "pbmcapply", "pegas", "phateR", "phytools", "picante", "pillar", "pinfsc50", "pingr", "pkgbuild", "pkgconfig", "pkgdown", "pkgload", "PKI", "plotrix", "plyr", "prettyunits", "processx", "profvis", "promises", "ps", "psych", "qgraph", "quadprog", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rappdirs", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "rematch2", "reshape2", "reticulate", "rex", "rgdal", "rgeos", "RgoogleMaps", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rsconnect", "RSQLite", "rstan", "rstantools", "rsvg", "Rttf2pt1", "rvcheck", "rvest", "sandwich", "scales", "scatterpie", "segmented", "selectr", "sem", "seqinr", "sf", "shiny", "sna", "sp", "SparseM", "spatstat.utils", "spData", "spdep", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "subplex", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidytree", "tinytex", "tmap", "tmaptools", "tweenr", "units", "utf8", "uuid", "vcd", "vcfR", "vctrs", "vdiffr", "vegan", "viridis", "viridisLite", "webshot", "whisker", "xfun", "xml2", "yaml", "zip", "zoo"))
update.packages(ask=FALSE)
update.packages(ask=FALSE)
devtools::document()
install.packages("devtools")
getwd()
devtools::document()
install.packages("Rcpp")
devtools::document()
warnings()
install.packages(c("data.table", "dplyr", "bayestestR", "scales", "reshape2", "ggplot2", "forcats", "gtools", "RIdeogram", "gdata", "adegenet"))
install.packages(c("data.table", "dplyr", "bayestestR", "scales", "reshape2", "ggplot2", "forcats", "gtools", "RIdeogram", "gdata", "adegenet"))
devtools::document()
install.packages("adegenet")
install.packages("bslib")
library("ClinePlotR")
install.packages(c("dplyr", "ggforce", "readr", "introgress", "devtools", "adegenet", "ggplot2", "reshape2", "scales", "bayestestR", "data.table", "forcats", "gdata", "gtools", "RIdeogram", "ENVeval", "rJava", "raster", "sp", "dismo"))
devtools::load_all()
# output directory to save plots in; will create if doesn't exist
plotDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/results/plots"
# Directory with BGC output files; transcriptomic alignment
genesDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_outputFiles/genes"
# Directory with BGC output files; scaffold alignment
fullDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_outputFiles/fulldataset"
# PAFScaff output file; needed for ideogram
pafInfo  <-
"C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/PAFScaff/pafscaff_asm20_scafTrans_tscripta.scaffolds.tdt"
# prefix for BGC output files
prefix <- "eatt"
# admixed population from popmap file
admixPop <- "EATT"
# Path to population map (popmap) file
popmap <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/popmaps/bgc/eatt.bgc.popmap_final.txt"
# File with locus names (transcriptomic alignment)
genes.loci.file <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_lociFiles/genes/eatt_bgc_loci.txt"
# File with locus names (scaffold alignment)
full.loci.file <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_lociFiles/fulldataset/eatt_bgc_loci.txt"
# Directory to save scaffold info files; Will create if doesnt't exist
scafInfoDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/results/scafInfo"
# Set size of heatmap bands on ideogram. Measured in nucleotide bases
# Strictly for better visualization. Can be adjusted as needed
gene.size <- 4e6 # known genes
other.size <- 1e6 # scaffold alignment
# GFF file is from the Terrapene mexicana triunguis scaffold-level genome
# It can be found at: https://www.ncbi.nlm.nih.gov/genome/?term=Terrapene
gff <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/gff/genes_Terrapene.gff"
# Combine multiple independent BGC runs together
bgc.genes <-
combine_bgc_output(results.dir = genesDIR,
prefix = prefix)
# Detect BGC outliers for known genes
gene.outliers <-
get_bgc_outliers(
df.list = bgc.genes,
admix.pop = admixPop,
popmap = popmap,
loci.file = genes.loci.file
)
# Aggregate runs together
bgc.full <-
combine_bgc_output(results.dir = fullDIR,
prefix = prefix)
# Detect outliers in scaffold alignment
full.outliers <-
get_bgc_outliers(
df.list = bgc.full,
admix.pop = admixPop,
popmap = popmap,
loci.file = full.loci.file
)
gff <- parseGFF(gff.filepath = gff)
View(gff)
gc()
rm(gff)
gc()
devtools::load_all()
dataDIR <- "../clinehelpr_analysis/data/exampleData/introgress"
rasterDIR <- "../clinehelpr_analysis/data/exampleData/ENMeval_bioclim/"
devtools::load_all()
genind <- adegenet::read.structure(
file = "../clinehelpr_analysis/data/exampleData/bgc/bgc_structureFiles/eatt.str",
n.ind = 101,
n.loc = 233,
onerowperind = FALSE,
col.lab = 1,
col.pop = 2,
row.marknames = 1,
NA.char = -9,
ask = FALSE)
plotDIR <- "../clinehelpr_analysis/notebooks/plots"
eatt <- runIntrogress(
p1.input = file.path(plotDIR, "eatt_p1data.txt"),
p2.input = file.path(plotDIR, "eatt_p2data.txt"),
admix.input = file.path(plotDIR, "eatt_admix.txt"),
loci.input = file.path(plotDIR, "eatt_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = plotDIR,
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
eatt <- runIntrogress(
p1.file = file.path(plotDIR, "eatt_p1data.txt"),
p2.file = file.path(plotDIR, "eatt_p2data.txt"),
admix.file = file.path(plotDIR, "eatt_admix.txt"),
loci.file = file.path(plotDIR, "eatt_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = plotDIR,
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
genind2introgress(gen = genind,
p1 = "2",
p2 = "3",
admix = "1",
missingPerLoc = 0.3,
missingPerInd = 0.5,
prefix=file.path(plotDIR, "eatt"))
eatt <- runIntrogress(
p1.file = file.path(plotDIR, "eatt_p1data.txt"),
p2.file = file.path(plotDIR, "eatt_p2data.txt"),
admix.file = file.path(plotDIR, "eatt_admix.txt"),
loci.file = file.path(plotDIR, "eatt_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = plotDIR,
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
?introgress
setwd("C:/Users/evobi/Desktop/missing_data_PCA/MISSdata")
data <- load("p3_mig50_SNP_biasINDV_miss0.2.RData")
write.csv(biasINDV, file = "../../PG-SUI/pgsui/example_data/biasINDV20.csv", quote = F, sep = ",")
write.csv(biasINDV, file = "../../PG-SUI/pgsui/example_data/biasINDV20.csv", quote = F)
write.csv(biasINDV, file = "../../PG-SUI/pgsui/example_data/biasINDV20.csv", quote = F, row.names=T)
write.csv(biasINDV, file = "../../PG-SUI/pgsui/example_data/biasINDV20.csv", quote = F, row.names=T, col.names=F)
setwd("C:/Users/evobi/Desktop/missing_data_PCA/MISSdata")
library("adegenet")
load("p3_mig50_SNP_biasINDV_miss0.2.RData")
pca <- dudi.pca(biasINDV, center=False, scale=False)
library(adegenet)
library(stringr)
library(ggplot2)
library(ggpubr)
install.packages("ggpubr")
library(adegenet)
library(stringr)
library(ggplot2)
library(ggpubr)
run_glPCA = function(SNP_data, loci_number,...) {
gl = new("genlight", SNP_data, ploidy=2)
pca = glPca(gl, nf=loci_number) # nloci > nindv, keep all axes
scores = as.data.frame(pca$scores)
scores$indv = rownames(scores)
scores$pop = gsub(".indv.*", "", scores$indv)
indvmiss = NULL
for (i in 1:nrow(SNP_data)) {
x = SNP_data[i, ]
y = length(x[x == "NA"]) / loci_number
indvmiss = c(indvmiss, y)
}
scores$indvmiss = round(indvmiss, 2)
snpmiss = NULL
for (i in 1:loci_number) {
x = SNP_data[, i]
y = length(x[x == "NA"]) / nrow(SNP_data)
snpmiss = c(snpmiss, y)
}
pca <<- pca
scores <<- scores
snpmiss <<- snpmiss
}
######### plot PCA results with color coded missingness per individual #########
plot_PCA_scores = function(data_name, scores_file, pca_file, my_shape, print=T, plot_title=NULL, shape_guide=T, ...){
myplot = ggplot(scores_file[order(scores_file$indvmiss, decreasing=F),],
aes(x=PC1, y=PC2, shape=pop, fill=indvmiss)) +       #### NOTE: fill color as a gradient based on individual missing values in the input data set; recommended for a quick check of potential missing data effects
geom_point(size=1.8, stroke=0.02, alpha=0.9) +
scale_shape_manual(values=my_shape) +
guides(shape=ifelse(shape_guide==T, "legend", F))+
geom_hline(yintercept=0, color="grey60", size=0.1) +
geom_vline(xintercept=0, color="grey60", size=0.1) +
theme_bw() +
labs(title=ifelse(is.null(plot_title), gsub(".RData", "", data_name), plot_title),
x=paste0("PC1: ", round(pca_file$eig[1]/sum(pca_file$eig)*100, 2), "%"),
y=paste0("PC2: ", round(pca_file$eig[2]/sum(pca_file$eig)*100, 2),"%")) +
theme(axis.title = element_text(size=7.5), axis.text = element_text(size=6),
axis.ticks = element_line(size=0.1),
legend.title = element_text(size=6), legend.text = element_text(size=6),
legend.key.width = unit(2, "mm"),legend.key.height = unit(3, "mm"),
legend.margin=margin(0,0,0,-8),
title = element_blank(),
panel.grid = element_line(size=0.05), panel.border = element_rect(size=0.2))
if(print == T) {print(myplot)} else {return(myplot)}
}
myshape = c("pop1"=21, "pop2"=24, "pop3"=22)
run_glPCA(SNP, nloci)
nloci = 5000
nindv = 25
glPCA_center_scale = function(SNP_data, loci_number,
do_center=T, do_scale=T, ...) {
gl = new("genlight", SNP_data, ploidy=2)
pca = glPca(gl, nf=loci_number, # nloci > nindv, keep all axes
center = do_center, scale = do_scale)
scores = as.data.frame(pca$scores)
scores$indv = rownames(scores)
scores$pop = gsub(".indv.*", "", scores$indv)
indvmiss = NULL
for (i in 1:nrow(SNP_data)) {
x = SNP_data[i, ]
y = length(x[x == "NA"]) / loci_number
indvmiss = c(indvmiss, y)
}
scores$indvmiss = round(indvmiss, 2)
snpmiss = NULL
for (i in 1:loci_number) {
x = SNP_data[, i]
y = length(x[x == "NA"]) / nrow(SNP_data)
snpmiss = c(snpmiss, y)
}
pca <<- pca
scores <<- scores
snpmiss <<- snpmiss
}
gl = new("genlight", SNP_data, ploidy=2)
gl = new("genlight", biasINDV, ploidy=2)
pca <- glPca(gl, nf=nloci)
scores = as.data.frame(pca$scores)
scores$indv = rownames(scores)
scores$pop = gsub(".indv.*", "", scores$indv)
indvmiss = NULL
for (i in 1:nrow(SNP_data)) {
x = SNP_data[i, ]
y = length(x[x == "NA"]) / loci_number
indvmiss = c(indvmiss, y)
}
scores$indvmiss = round(indvmiss, 2)
snpmiss = NULL
for (i in 1:loci_number) {
x = SNP_data[, i]
y = length(x[x == "NA"]) / nrow(SNP_data)
snpmiss = c(snpmiss, y)
}
pca <<- pca
scores <<- scores
snpmiss <<- snpmiss
scores = as.data.frame(pca$scores)
scores$indv = rownames(scores)
scores$pop = gsub(".indv.*", "", scores$indv)
indvmiss = NULL
for (i in 1:nrow(biasINDV)) {
x = SNP_data[i, ]
y = length(x[x == "NA"]) / loci_number
indvmiss = c(indvmiss, y)
}
scores$indvmiss = round(indvmiss, 2)
snpmiss = NULL
for (i in 1:nloci) {
x = SNP_data[, i]
y = length(x[x == "NA"]) / nrow(biasINDV)
snpmiss = c(snpmiss, y)
}
pca <<- pca
scores <<- scores
snpmiss <<- snpmiss
scores = as.data.frame(pca$scores)
scores$indv = rownames(scores)
scores$pop = gsub(".indv.*", "", scores$indv)
indvmiss = NULL
for (i in 1:nrow(biasINDV)) {
x = biasINDV[i, ]
y = length(x[x == "NA"]) / loci_number
indvmiss = c(indvmiss, y)
}
scores$indvmiss = round(indvmiss, 2)
snpmiss = NULL
for (i in 1:nloci) {
x = SNP_data[, i]
y = length(x[x == "NA"]) / nrow(biasINDV)
snpmiss = c(snpmiss, y)
}
pca <<- pca
scores <<- scores
snpmiss <<- snpmiss
scores = as.data.frame(pca$scores)
scores$indv = rownames(scores)
scores$pop = gsub(".indv.*", "", scores$indv)
indvmiss = NULL
for (i in 1:nrow(biasINDV)) {
x = biasINDV[i, ]
y = length(x[x == "NA"]) / loci_number
indvmiss = c(indvmiss, y)
}
scores$indvmiss = round(indvmiss, 2)
snpmiss = NULL
for (i in 1:nloci) {
x = biasINDV[, i]
y = length(x[x == "NA"]) / nrow(biasINDV)
snpmiss = c(snpmiss, y)
}
pca <<- pca
scores <<- scores
snpmiss <<- snpmiss
scores = as.data.frame(pca$scores)
scores$indv = rownames(scores)
scores$pop = gsub(".indv.*", "", scores$indv)
indvmiss = NULL
for (i in 1:nrow(biasINDV)) {
x = biasINDV[i, ]
y = length(x[x == "NA"]) / nloci
indvmiss = c(indvmiss, y)
}
scores$indvmiss = round(indvmiss, 2)
snpmiss = NULL
for (i in 1:nloci) {
x = biasINDV[, i]
y = length(x[x == "NA"]) / nrow(biasINDV)
snpmiss = c(snpmiss, y)
}
pca <<- pca
scores <<- scores
snpmiss <<- snpmiss
run_glPCA(biasINDV, nloci)
test <- run_glPCA(biasINDV, nloci)
plot_PCA_scores("test.RData", scores, pca, my_shap)
plot_PCA_scores("test.RData", scores, pca, my_shape)
plot_PCA_scores("test.RData", scores, pca, myshape)
library("adegenet")
setwd("C:/Users/evobi/Desktop/PG-SUI")
data <- read.structure("output_imputed.str", n.ind = 117, n.loc = 100, onerowperind = FALSE, col.lab = 0, col.pop = 2, quiet = TRUE)
data <- read.structure("output_imputed.str", n.ind = 117, n.loc = 100, onerowperind = FALSE, col.lab = 0, col.pop = 2, quiet = TRUE, col.others = NA, row.marknames = 0, ask = FALSE)
data <- read.structure("output_imputed.str", n.ind = 117, n.loc = 100, onerowperind = TRUE, col.lab = 0, col.pop = 2, quiet = TRUE, col.others = NA, row.marknames = 0, ask = FALSE)
list.files()
data <- read.structure("output_imputed.str", n.ind = 117, n.loc = 100, onerowperind = FALSE, col.lab = 1, col.pop = 2, quiet = TRUE, col.others = NA, row.marknames = 0, ask = FALSE)
data.gl <- as.genlight(data)
library("dart")
library("dartR")
install.packages("dartR")
library("dartR")
fa <- adegenet::fasta2genlight(file = "output_imputed.fa", quiet = TRUE)
fa <- adegenet::fasta2genlight(file = "output_imputed.fa", quiet = TRUE, n.cores = 1)
pca <- glPca(fa)
plot_PCA_scores = function(data_name, scores_file, pca_file, my_shape, print=T, plot_title=NULL, shape_guide=T, ...){
myplot = ggplot(scores_file[order(scores_file$indvmiss, decreasing=F),],
aes(x=PC1, y=PC2, shape=pop, fill=indvmiss)) +       #### NOTE: fill color as a gradient based on individual missing values in the input data set; recommended for a quick check of potential missing data effects
geom_point(size=1.8, stroke=0.02, alpha=0.9) +
scale_shape_manual(values=my_shape) +
guides(shape=ifelse(shape_guide==T, "legend", F))+
geom_hline(yintercept=0, color="grey60", size=0.1) +
geom_vline(xintercept=0, color="grey60", size=0.1) +
theme_bw() +
labs(title=ifelse(is.null(plot_title), gsub(".RData", "", data_name), plot_title),
x=paste0("PC1: ", round(pca_file$eig[1]/sum(pca_file$eig)*100, 2), "%"),
y=paste0("PC2: ", round(pca_file$eig[2]/sum(pca_file$eig)*100, 2),"%")) +
theme(axis.title = element_text(size=7.5), axis.text = element_text(size=6),
axis.ticks = element_line(size=0.1),
legend.title = element_text(size=6), legend.text = element_text(size=6),
legend.key.width = unit(2, "mm"),legend.key.height = unit(3, "mm"),
legend.margin=margin(0,0,0,-8),
title = element_blank(),
panel.grid = element_line(size=0.05), panel.border = element_rect(size=0.2))
if(print == T) {print(myplot)} else {return(myplot)}
}
scores <- as.data.frame(pca$scores)
library("adegenet")
