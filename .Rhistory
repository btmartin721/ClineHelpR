popmap = popmap,
loci.file = full.loci.file
)
ab.range <-
data.frame(
"full.alpha" = c(
"min" = min(full.outliers[[1]]$alpha),
"max" = max(full.outliers[[1]]$alpha)
),
"full.beta" = c(
"min" = min(full.outliers[[1]]$beta),
"max" = max(full.outliers[[1]]$beta)
),
"genes.alpha" = c(
"min" = min(gene.outliers[[1]]$alpha),
"max" = max(gene.outliers[[1]]$alpha)
),
"genes.beta" = c(min(gene.outliers[[1]]$beta), max(gene.outliers[[1]]$beta))
)
write.table(
data.frame("Header" = rownames(ab.range), ab.range),
file = file.path(plotDIR, paste0(prefix, "_ab.ranges.csv")),
sep = ",",
row.names = F,
col.names = T,
quote = F
)
phiPlot(
outlier.list = gene.outliers,
popname = paste0(admixPop, " Genes"),
line.size = 0.35,
saveToFile = paste0(prefix, "_genes"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
phiPlot(
outlier.list = full.outliers,
popname = paste0(admixPop, " All"),
line.size = 0.2,
saveToFile = paste0(prefix, "_genome"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
alphaBetaPlot(
eatt.gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = eatt.prefix,
plotDIR = "../plots", padding = 0.2,
)
alphaBetaPlot(
gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = prefix,
plotDIR = "../plots", padding = 0.2,
)
alphaBetaPlot(
gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = prefix,
plotDIR = "./plots", padding = 0.2,
)
gff <- parseGFF(gff.filepath = gff)
scafInfoDIR <- "./scafInfo"
genes.annotated <-
join_bgc_gff(
prefix = prefix,
outlier.list = gene.outliers,
gff.data = gff,
scafInfoDIR = scafInfoDIR
)
ref.trans.info <-
plot_outlier_ideogram(
prefix = prefix,
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = FALSE
)
gene.size <- 4e6
other.size <- 1e6
ref.trans.info <-
plot_outlier_ideogram(
prefix = prefix,
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = FALSE
)
setwd("D:/scripts/ClinePlotR/scripts")
setwd("../../")
getwd()
library("ClinePlotR")
fullDIR <- "exampleData/bgc/bgc_outputFiles/fulldataset"
# output directory to save plots in; will create if doesn't exist
plotDIR <- "./plots"
# Directory with BGC output files; transcriptomic alignment
genesDIR <- "exampleData/bgc/bgc_outputFiles/genes"
# Directory with BGC output files; scaffold alignment
fullDIR <- "exampleData/bgc/bgc_outputFiles/fulldataset"
# PAFScaff output file; needed for ideogram
pafInfo  <-
"exampleData/PAFScaff/pafscaff_asm20_scafTrans_tscripta.scaffolds.tdt"
# prefix for BGC output files
prefix <- "eatt"
# admixed population from popmap file
admixPop <- "EATT"
# Path to population map (popmap) file
popmap <- "exampleData/popmaps/bgc/eatt.bgc.popmap_final.txt"
# File with locus names (transcriptomic alignment)
genes.loci.file <- "exampleData/bgc/bgc_lociFiles/genes/eatt_bgc_loci.txt"
# File with locus names (scaffold alignment)
full.loci.file <- "exampleData/bgc/bgc_lociFiles/fulldataset/eatt_bgc_loci.txt"
# Directory to save scaffold info files; Will create if doesnt't exist
scafInfoDIR <- "./scafInfo"
# Set size of heatmap bands on ideogram. Measured in nucleotide bases
# Strictly for better visualization. Can be adjusted as needed
gene.size <- 4e6 # known genes
other.size <- 1e6 # scaffold alignment
# GFF file is from the Terrapene mexicana triunguis scaffold-level genome
# It can be found at: https://www.ncbi.nlm.nih.gov/genome/?term=Terrapene
gff <- "exampleData/gff/genes_Terrapene.gff"
# Combine multiple independent BGC runs together
bgc.genes <-
combine_bgc_output(results.dir = genesDIR,
prefix = prefix)
# Plot the likelihood and parameter traces
plot_traces(df.list = bgc.genes,
prefix = prefix,
plotDIR = plotDIR)
# Detect BGC outliers for known genes
gene.outliers <-
get_bgc_outliers(
df.list = bgc.genes,
admix.pop = admixPop,
popmap = popmap,
loci.file = genes.loci.file
)
# Aggregate runs together
bgc.full <-
combine_bgc_output(results.dir = fullDIR,
prefix = prefix)
# Plot likelihood and parameter traces
plot_traces(
df.list = bgc.full,
prefix = paste0(prefix, "_full"),
plotDIR = plotDIR
)
# Detect outliers in scaffold alignment
full.outliers <-
get_bgc_outliers(
df.list = bgc.full,
admix.pop = admixPop,
popmap = popmap,
loci.file = full.loci.file
)
# Not ClinePlotR functions.
# This just saves the minimum and maximum alpha and beta outlier values
# Can be used to add to the legend
ab.range <-
data.frame(
"full.alpha" = c(
"min" = min(full.outliers[[1]]$alpha),
"max" = max(full.outliers[[1]]$alpha)
),
"full.beta" = c(
"min" = min(full.outliers[[1]]$beta),
"max" = max(full.outliers[[1]]$beta)
),
"genes.alpha" = c(
"min" = min(gene.outliers[[1]]$alpha),
"max" = max(gene.outliers[[1]]$alpha)
),
"genes.beta" = c(min(gene.outliers[[1]]$beta), max(gene.outliers[[1]]$beta))
)
# Write alpha beta ranges to file.
write.table(
data.frame("Header" = rownames(ab.range), ab.range),
file = file.path(plotDIR, paste0(prefix, "_ab.ranges.csv")),
sep = ",",
row.names = F,
col.names = T,
quote = F
)
# Make the phi plot for the transcriptomic alignment
# Any of these parameters can be adjusted as needed.
# Here, both.outlier.tests is FALSE
# This means that outliers are flagged if they are significant in either method
phiPlot(
outlier.list = gene.outliers,
popname = paste0(admixPop, " Genes"),
line.size = 0.35,
saveToFile = paste0(prefix, "_genes"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
# This means that both outlier tests have to be significant to flag the outlier
phiPlot(
outlier.list = gene.outliers,
popname = paste0(admixPop, " Genes"),
line.size = 0.35,
saveToFile = paste0(prefix, "_genes_bothOutlierTests"),
plotDIR = plotDIR,
both.outlier.tests = TRUE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
# Phi plot for scaffold alignment
phiPlot(
outlier.list = full.outliers,
popname = paste0(admixPop, " All"),
line.size = 0.2,
saveToFile = paste0(prefix, "_scaffold"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
# alphabetaplot
# 2-D contour plot with hulls for outliers
alphaBetaPlot(
gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = prefix,
plotDIR = "./plots",
padding = 0.2,
)
gff <- parseGFF(gff.filepath = gff)
# Get annotation info for BGC outliers (transcriptomic alignment)
genes.annotated <-
join_bgc_gff(
prefix = prefix,
outlier.list = gene.outliers,
gff.data = gff,
scafInfoDIR = scafInfoDIR
)
# Plot ideogram
# Here, both.outlier.tests is FALSE
# This means that the SNP is an outlier if flagged by either outlier test
ref.trans.info <-
plot_outlier_ideogram(
prefix = paste0(prefix, "_eitherOutlierTests"),
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = FALSE
)
# Plot ideogram. this time, both.outlier.tests = TRUE
# This means that both outlier tests have to be significant to flag as outlier
# More conservative
ref.trans.info_bothOutlierTests <-
plot_outlier_ideogram(
prefix = paste0(prefix, "_bothOutlierTests"),
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = TRUE
)
# Write annotation information to file so it can be used later
write.table(
genes.annotated,
file = file.path(plotDIR, paste0(prefix, "_genesAnnotated.csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
# Write annotation information to file so it can be used later
write.table(
ref.trans.info,
file = file.path(plotDIR, paste0(prefix, "_refTransInfo.csv")),
quote = TRUE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
library("ClinePlotR")
getwd()
# Set working directory here
# Mean annual solar radiation; https://worldclim.org
setwd("exampleData/ENMeval_bioclim/rasterLayers/original/wc2.1_30s_srad/")
library("raster")
library("rgdal")
# Load into raster stack
solar.files <- list.files(pattern = "*.tif", full.names = TRUE)
solar.rad <- raster::stack(solar.files)
# Wind speed for each of 12 months; found at https://worldclim.org;
setwd("exampleData/ENMeval_bioclim/rasterLayers/original/wc2.1_30s_wind/")
setwd("../wc2.1_30s_wind/")
wind.files <- list.files(pattern = "*.tif", full.names = TRUE)
wind <- raster::stack(wind.files)
# Calculate annual means
solar.mean <- raster::calc(solar.rad, fun = mean, na.rm = TRUE)
wind.mean <- raster::calc(wind, fun = mean, na.rm = TRUE)
setwd("../../../../../")
samples <-
read.csv(
"exampleData/ENMeval_bioclim/localityInfo/sample_localities_maxent_southeast.csv",
header = TRUE,
stringsAsFactors = FALSE
)
getwd()
library("ClinePlotR")
rasterDIR <- "exampleData/ENMeval_bioclim/"
dataDIR <- "exampleData/introgress"
envList <- readRDS("exampleData/ENMeval_bioclim/Robjects/envList.rds")
rasterPoint.list <- extractPointValues(envList)
eatt <- runIntrogress(
p1.file = file.path(dataDIR, "inputFiles", "EATT_p1data.txt"),
p2.file = file.path(dataDIR, "inputFiles", "EATT_p2data.txt"),
admix.file = file.path(dataDIR, "inputFiles", "EATT_admix.txt"),
loci.file = file.path(dataDIR, "inputFiles", "EATT_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "inputFiles", "eatt_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "eatt"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "clines"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
getwd()
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "clines"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
warnings()
setwd("ClinePlotR/")
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::clean_vignettes()
setwd("D:/scripts/ClinePlotR")
devtools::clean_vignettes()
devtools::clean_vignettes("."
)
install.packages("attachment")
install.packages("packrat")
packrat::unused_packages(project = ".")
packrat::unused_packages(project = ".", lib.loc = "bayestestR")
setwd("D:/scripts/ClinePlotR")
devtools::document()
install.packages("bayestestR")
install.packages("RIdeogram")
install.packages("devtools")
install.packages("devtools")
install.packages(c("ade4", "adegenet", "ape", "arm", "backports", "BDgraph", "BH", "BiocManager", "bit", "bit64", "bitops", "blob", "brio", "broom", "calibrate", "callr", "car", "carData", "checkmate", "ClassDiscovery", "classInt", "cli", "clipr", "cluster", "clusterGeneration", "coda", "colorspace", "conStruct", "corpcor", "covr", "cowplot", "cpm", "crayon", "crosstalk", "curl", "data.table", "DBI", "deldir", "dendextend", "deSolve", "diffobj", "digest", "dismo", "diversitree", "doParallel", "dplyr", "e1071", "egg", "ellipse", "ellipsis", "ENMeval", "expm", "factoextra", "FactoMineR", "fansi", "farver", "fastmap", "fastmatch", "fdrtool", "foghorn", "forcats", "foreach", "Formula", "fs", "fst", "future", "gap", "gdistance", "gdtools", "geiger", "generics", "genetics", "gert", "GGally", "ggdendro", "ggforce", "ggimage", "ggplot2", "ggplotify", "ggpubr", "ggrepel", "ggsignif", "ggthemes", "git2r", "glasso", "globals", "glue", "gmailr", "gplots", "gridGraphics", "gtools", "haven", "hexbin", "hierfstat", "highlight", "highr", "hisse", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "hunspell", "igraph", "inline", "iterators", "jomo", "jpeg", "jsonlite", "kableExtra", "kernlab", "knitr", "labeling", "later", "lavaan", "leaflet", "leaps", "lemon", "lintr", "listenv", "lme4", "lmtest", "logistf", "loo", "lwgeom", "magick", "magrittr", "mapproj", "maptools", "markdown", "MASS", "matrixcalc", "MatrixModels", "matrixStats", "maxnet", "mclust", "mcmc", "memuse", "mice", "mime", "mitml", "mnormt", "mockery", "multcomp", "mvtnorm", "network", "nloptr", "oompaBase", "openssl", "openxlsx", "optparse", "ordinal", "packrat", "parsedate", "pbapply", "pbkrtest", "pbmcapply", "pegas", "phateR", "phytools", "picante", "pillar", "pinfsc50", "pingr", "pkgbuild", "pkgconfig", "pkgdown", "pkgload", "PKI", "plotrix", "plyr", "prettyunits", "processx", "profvis", "promises", "ps", "psych", "qgraph", "quadprog", "quantreg", "R.methodsS3", "R.oo", "R.utils", "R6", "rappdirs", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "readr", "rematch2", "reshape2", "reticulate", "rex", "rgdal", "rgeos", "RgoogleMaps", "rio", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rsconnect", "RSQLite", "rstan", "rstantools", "rsvg", "Rttf2pt1", "rvcheck", "rvest", "sandwich", "scales", "scatterpie", "segmented", "selectr", "sem", "seqinr", "sf", "shiny", "sna", "sp", "SparseM", "spatstat.utils", "spData", "spdep", "spelling", "StanHeaders", "statnet.common", "stringdist", "stringi", "subplex", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidytree", "tinytex", "tmap", "tmaptools", "tweenr", "units", "utf8", "uuid", "vcd", "vcfR", "vctrs", "vdiffr", "vegan", "viridis", "viridisLite", "webshot", "whisker", "xfun", "xml2", "yaml", "zip", "zoo"))
update.packages(ask=FALSE)
update.packages(ask=FALSE)
devtools::document()
install.packages("devtools")
getwd()
devtools::document()
install.packages("Rcpp")
devtools::document()
warnings()
install.packages(c("data.table", "dplyr", "bayestestR", "scales", "reshape2", "ggplot2", "forcats", "gtools", "RIdeogram", "gdata", "adegenet"))
install.packages(c("data.table", "dplyr", "bayestestR", "scales", "reshape2", "ggplot2", "forcats", "gtools", "RIdeogram", "gdata", "adegenet"))
devtools::document()
install.packages("adegenet")
install.packages("bslib")
library("ClinePlotR")
install.packages(c("dplyr", "ggforce", "readr", "introgress", "devtools", "adegenet", "ggplot2", "reshape2", "scales", "bayestestR", "data.table", "forcats", "gdata", "gtools", "RIdeogram", "ENVeval", "rJava", "raster", "sp", "dismo"))
devtools::load_all()
# output directory to save plots in; will create if doesn't exist
plotDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/results/plots"
# Directory with BGC output files; transcriptomic alignment
genesDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_outputFiles/genes"
# Directory with BGC output files; scaffold alignment
fullDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_outputFiles/fulldataset"
# PAFScaff output file; needed for ideogram
pafInfo  <-
"C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/PAFScaff/pafscaff_asm20_scafTrans_tscripta.scaffolds.tdt"
# prefix for BGC output files
prefix <- "eatt"
# admixed population from popmap file
admixPop <- "EATT"
# Path to population map (popmap) file
popmap <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/popmaps/bgc/eatt.bgc.popmap_final.txt"
# File with locus names (transcriptomic alignment)
genes.loci.file <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_lociFiles/genes/eatt_bgc_loci.txt"
# File with locus names (scaffold alignment)
full.loci.file <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/bgc/bgc_lociFiles/fulldataset/eatt_bgc_loci.txt"
# Directory to save scaffold info files; Will create if doesnt't exist
scafInfoDIR <- "C:/Users/evobi/Desktop/clinehelpr_analysis/results/scafInfo"
# Set size of heatmap bands on ideogram. Measured in nucleotide bases
# Strictly for better visualization. Can be adjusted as needed
gene.size <- 4e6 # known genes
other.size <- 1e6 # scaffold alignment
# GFF file is from the Terrapene mexicana triunguis scaffold-level genome
# It can be found at: https://www.ncbi.nlm.nih.gov/genome/?term=Terrapene
gff <- "C:/Users/evobi/Desktop/clinehelpr_analysis/data/exampleData/gff/genes_Terrapene.gff"
# Combine multiple independent BGC runs together
bgc.genes <-
combine_bgc_output(results.dir = genesDIR,
prefix = prefix)
# Detect BGC outliers for known genes
gene.outliers <-
get_bgc_outliers(
df.list = bgc.genes,
admix.pop = admixPop,
popmap = popmap,
loci.file = genes.loci.file
)
# Aggregate runs together
bgc.full <-
combine_bgc_output(results.dir = fullDIR,
prefix = prefix)
# Detect outliers in scaffold alignment
full.outliers <-
get_bgc_outliers(
df.list = bgc.full,
admix.pop = admixPop,
popmap = popmap,
loci.file = full.loci.file
)
gff <- parseGFF(gff.filepath = gff)
View(gff)
gc()
rm(gff)
gc()
