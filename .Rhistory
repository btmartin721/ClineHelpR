minLon = -100,
maxLon = -45)
devtools::document()
devtools::load_all()
summarize_ENMeval(
eval.par = eval.par,
plotDIR = "../../../../Dissertation/BOX/gis/bioclim_R/plots/",
minLat = 25,
maxLat = 45,
minLon = -100,
maxLon = -45)
summarize_ENMeval(
eval.par = eval.par,
plotDIR = "../../../../Dissertation/BOX/gis/bioclim_R/plots/",
minLat = 25,
maxLat = 45,
minLon = -100,
maxLon = -45,
imp.margins = c(13.1, 4.1, 4.1, 2.1))
summarize_ENMeval(
eval.par = eval.par,
plotDIR = "../../../../Dissertation/BOX/gis/bioclim_R/plots/",
minLat = 25,
maxLat = 45,
minLon = -100,
maxLon = -45,
imp.margins = c(15.1, 4.1, 4.1, 2.1))
devtools::document()
devtools::load_all()
summarize_ENMeval(
eval.par = eval.par,
plotDIR = "../../../../Dissertation/BOX/gis/bioclim_R/plots/",
minLat = 25,
maxLat = 45,
minLon = -100,
maxLon = -45,
imp.margins = c(15.1, 4.1, 10.1, 2.1))
summarize_ENMeval(
eval.par = eval.par,
plotDIR = "../../../../Dissertation/BOX/gis/bioclim_R/plots/",
minLat = 25,
maxLat = 45,
minLon = -100,
maxLon = -45,
imp.margins = c(15.1, 4.1, 3.1, 2.1))
View(eval.par)
View(eval.par)
# I want to save the best model so I can open it in QGIS
# Which was LQH feature classes with RM = 2.5
raster::writeRaster(eval.par@predictions@layers[[28]], filename = "../../../../Dissertation/BOX/gis/bioclim_R/plots/LQH_2.5.tif", format = "GTiff", device = "GTiff")
eval.par@models[[28]]@lambdas
devtools::load_all()
# Use delta.AICc to find best model and plot response curves for it
# For this dataset it was features classes LQH and RM = 2.5
pdf(file = file.path("../../../../Dissertation/BOX/gis/bioclim_R/plots/",
"ENMeval_responseCurves.pdf"),
width=7,
height=7,
onefile=TRUE)
# Plot response curves.
dismo::response(eval.par@models[[28]])
dev.off()
install.packages("changer")
setwd("D:/scripts/bgcPlotter/Rscripts/bgcPlotter")
install.packages("git2r")
git2r::add()
git2r::add(path = "./*")
git2r::commit(message = "Added ENMeval functions for finding best raster layers", all = TRUE)
git2r::config(repo = ".", user.name = "btmartin721", user.email = "evobio721@gmail.com")
git2r::config(repo = "./", user.name = "btmartin721", user.email = "evobio721@gmail.com")
git2r::config(repo = "btmartin721/bgcPlotter", user.name = "btmartin721", user.email = "evobio721@gmail.com")
git2r::config(repo = "bgcPlotter", user.name = "btmartin721", user.email = "evobio721@gmail.com")
git2r::config(global = TRUE, user.name = "btmartin721", user.email = "evobio721@gmail.com")
git2r::commit(message = "Added ENMeval functions for finding best raster layers", all = TRUE)
git2r::add()
git2r::add(path = "./*")
git2r::commit(message = "Added ENMeval functions for finding best raster layers", all = TRUE)
git2r::push()
git2r::push(object = ".", name = "bgcPlotter")
git2r::push(object = ".", name = "origin", refspec = "refs/heads/master")
git2r::push(object = ".", name = "origin", refspec = "refs/heads/master", credentials = git2r::cred_token())
git2r::repository(path = ".", discover = TRUE)
git2r::push()
git2r::push(credentials = git2r::cred_user_pass())
git2r::push(credentials = git2r::cred_user_pass(username = "btmartin721"))
git2r::push(credentials = git2r::cred_user_pass(username = "btmartin721", password = "Sistrurus721!G"))
git2r::push(credentials = git2r::cred_user_pass(username = "btmartin721"
)
)
install.packages("getPass")
git2r::push(credentials = git2r::cred_user_pass(username = "btmartin721"))
changer::changer(".", new_name = "ClinePlotR", run_roxygen = TRUE)
plotDIR <- "../../../../Dissertation/BOX/gis/bioclim_R/plots"
devtools::load_all()
devtools::document()
devtools::load_all()
rasterDIR <- "../../../../Dissertation/BOX/gis/bioclim_R"
dataDIR <- "../../../../Dissertation/BOX/introgress/"
envList <- readRDS(file.path(rasterDIR, "gis_Routput", "envList.rds"))
envList[[1]]@data@values
View(envList)
View(envList)
envList[[1]]@data@names
rasterPoint.list <- extractPointValues(envList)
dir.create(file.path(dataDIR, "rasterPoints"))
for (i in 1:length(rasterPoint.list)){
write.table(rasterPoint.list[[i]],
file.path(dataDIR, "rasterPoints", paste0("rasterPoints_layer",
i,
".csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ",")
}
devtools::docuas.package()
devtools::document()
devtools::load_all()
rasterPoint.list <- extractPointValues(envList)
dir.create(file.path(dataDIR, "rasterPoints"))
for (i in 1:length(rasterPoint.list)){
write.table(rasterPoint.list[[i]],
file.path(dataDIR, "rasterPoints", paste0("rasterPoints_layer",
i,
".csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ",")
}
devtools::document()
devtools::load_all()
rasterPoint.list <- extractPointValues(envList)
devtools::document()
devtools::load_all()
rasterPoint.list <- extractPointValues(envList)
for (i in 1:length(rasterPoint.list)){
write.table(rasterPoint.list[[i]],
file.path(dataDIR, "rasterPoints", paste0("rasterPoints_",
rasterPoint.list[,4],
".csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ",")
}
for (i in 1:length(rasterPoint.list)){
write.table(rasterPoint.list[[i]],
file.path(dataDIR, "rasterPoints", paste0("rasterPoints_",
rasterPoint.list[[i]][,4],
".csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ",")
}
for (i in 1:length(rasterPoint.list)){
write.table(rasterPoint.list[[i]],
file.path(dataDIR, "rasterPoints", paste0("rasterPoints_",
colnames(rasterPoint.list[[i]][,4]),
".csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ",")
}
colnames(rasterPoint.list[[1]][4])
for (i in 1:length(rasterPoint.list)){
write.table(rasterPoint.list[[i]],
file.path(dataDIR, "rasterPoints", paste0("rasterPoints_",
colnames(rasterPoint.list[[i]][4]),
".csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ",")
}
for (i in 1:length(rasterPoint.list)){
write.table(rasterPoint.list[[i]],
file.path(rasterDIR, "rasterPoints", paste0("rasterPoints_",
colnames(rasterPoint.list[[i]][4]),
".csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ",")
}
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eagu_inds.txt"))
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles"),
clineMethod = "permutation",
prefix = "EAGU",
)
# EA X GU
eagu <- runIntrogress(
p1.file = file.path(dataDIR, "EAGU_p1data.txt"),
p2.file = file.path(dataDIR, "EAGU_p2data.txt"),
admix.file = file.path(dataDIR, "EAGU_admix_nocoordscut.txt"),
loci.file = file.path(dataDIR, "EAGU_loci.txt"),
clineLabels = c("EA", "Het", "GU"),
minDelt = 0.7,
prefix = "EAGU",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eagu_inds.txt"))
devtools::document()
devtools::load_all()
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles"),
clineMethod = "permutation",
prefix = "EAGU",
)
devtools::document()
devtools::load_all()
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles"),
clineMethod = "permutation",
prefix = "EAGU",
)
# EA X TT
eatt <- runIntrogress(
p1.file = file.path(dataDIR, "EATT_p1data.txt"),
p2.file = file.path(dataDIR, "EATT_p2data.txt"),
admix.file = file.path(dataDIR, "EATT_admix_nocoordscut.txt"),
loci.file = file.path(dataDIR, "EATT_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
setwd("D:/scripts/bgcPlotter/Rscripts/ClinePlotR")
# EA X TT
eatt <- runIntrogress(
p1.file = file.path(dataDIR, "EATT_p1data.txt"),
p2.file = file.path(dataDIR, "EATT_p2data.txt"),
admix.file = file.path(dataDIR, "EATT_admix_nocoordscut.txt"),
loci.file = file.path(dataDIR, "EATT_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
# EA X TT
eatt <- runIntrogress(
p1.file = file.path(dataDIR, "EATT_p1data_nocoordscut.txt"),
p2.file = file.path(dataDIR, "EATT_p2data.txt"),
admix.file = file.path(dataDIR, "EATT_admix_nocoordscut.txt"),
loci.file = file.path(dataDIR, "EATT_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
dir.create(file.path(dataDIR, "rawRoutput"), showWarnings = FALSE)
saveRDS(eagu, file = file.path(dataDIR, "rawRoutput", "eagu_introgress.rds"))
saveRDS(eatt, file = file.path(dataDIR, "rawRoutput", "eatt_introgress.rds"))
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eatt_inds.txt"))
View(rasterPoint.list.subset)
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "EATT"),
clineMethod = "permutation",
prefix = "EATT"
)
devtools::document()
devtools::load_all()
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "EATT"),
clineMethod = "permutation",
prefix = "EATT"
)
devtools::load_all()
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "EATT"),
clineMethod = "permutation",
prefix = "EATT"
)
devtools::load_all()
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "EATT"),
clineMethod = "permutation",
prefix = "EATT"
)
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles", "EAGU"),
clineMethod = "permutation",
prefix = "EAGU",
)
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eagu_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles", "EAGU"),
clineMethod = "permutation",
prefix = "EAGU",
)
devtools::load_all()
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eagu_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles", "EAGU"),
clineMethod = "permutation",
prefix = "EAGU",
)
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eatt_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "EATT"),
clineMethod = "permutation",
prefix = "EATT"
)
gutt <- runIntrogress(
p1.file = file.path(dataDIR, "GUTT_p1data_nocoordscut.txt"),
p2.file = file.path(dataDIR, "GUTT_p2data.txt"),
admix.file = file.path(dataDIR, "GUTT_admix_nocoordscut.txt"),
loci.file = file.path(dataDIR, "GUTT_loci.txt"),
clineLabels = c("GU", "Het", "TT"),
minDelt = 0.8,
prefix = "GUTT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
saveRDS(gutt, file = file.path(dataDIR, "rawRoutput", "gutt_introgress.rds"))
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "gutt_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = gutt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("GU", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "GUTT"),
clineMethod = "permutation",
prefix = "GUTT"
)
gutt <- runIntrogress(
p1.file = file.path(dataDIR, "GUTT_p1data.txt"),
p2.file = file.path(dataDIR, "GUTT_p2data.txt"),
admix.file = file.path(dataDIR, "GUTT_admix.txt"),
loci.file = file.path(dataDIR, "GUTT_loci.txt"),
clineLabels = c("GU", "Het", "TT"),
minDelt = 0.8,
prefix = "GUTT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
saveRDS(gutt, file = file.path(dataDIR, "rawRoutput", "gutt_introgress.rds"))
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "gutt_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = gutt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("GU", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "GUTT"),
clineMethod = "permutation",
prefix = "GUTT"
)
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = gutt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("GU", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "GUTT"),
clineMethod = "permutation",
prefix = "GUTT"
)
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = gutt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("GU", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "GUTT"),
clineMethod = "permutation",
prefix = "GUTT", cor.method = "spearman"
)
warnings()
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = gutt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("GU", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "GUTT"),
clineMethod = "permutation",
prefix = "GUTT",
cor.method = "auto"
)
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eagu_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles", "EAGU"),
clineMethod = "permutation",
prefix = "EAGU",
)
devtools::document()
devtools::load_all()
# Subset individuals for only the populations I want
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "eagu_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
clinesXenvironment(
clineList = eagu,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "GU"),
outputDIR = file.path(dataDIR, "outputFiles", "EAGU"),
clineMethod = "permutation",
prefix = "EAGU",
)
warnings()
