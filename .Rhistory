quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
write.table(
ref.trans.info,
file = file.path(plotDIR, paste0(prefix, "_refTransInfo.csv")),
quote = TRUE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
return(ref.trans.info)
}
setwd("D:/scripts/ClinePlotR/scripts")
plotDIR <- "./plots"
genesDIR <- "../vignettes/exampledata/genes"
fullDIR <- "../vignettes/exampledata/fulldataset"
pafInfo  <- "../vignettes/exampledata/refmap_asm20.scaffolds.tdt"
prefix <- "eatt"
admixPop <- "EATT"
plotDIR <- "./plots"
genesDIR <- "../vignettes/exampledata/genes"
fullDIR <- "../vignettes/exampledata/fulldataset"
pafInfo  <- "../vignettes/exampledata/refmap_asm20.scaffolds.tdt"
prefix <- "eatt"
admixPop <- "EATT"
popmap <- "../vignettes/exampledata/popmaps/eatt.bgc.popmap.txt"
genes.loci.file <- "../vignettes/exampledata/genes/population1_bgc_loci.txt"
full.loci.file <- "../vignettes/exampledata/fulldataset/full_population1_bgc_loci.txt"
# GFF file is the only one that can't be found in vignettes/exampledata.
# It can be found at: https://www.ncbi.nlm.nih.gov/genome/?term=Terrapene
gff <- "../../bgcPlotter/gff/genes.gff"
bgc.genes <-
combine_bgc_output(results.dir = genesDIR,
prefix = prefix)
plot_traces(df.list = bgc.genes,
prefix = prefix,
plotDIR = plotDIR)
plotDIR <- "./plots"
genesDIR <- "../vignettes/exampledata/genes"
fullDIR <- "../vignettes/exampledata/fulldataset"
pafInfo  <- "../vignettes/exampledata/refmap_asm20.scaffolds.tdt"
prefix <- "population1"
admixPop <- "GUTT"
popmap <- "../vignettes/exampledata/popmaps/gutt.bgc.popmap.txt"
genes.loci.file <- "../vignettes/exampledata/genes/population1_bgc_loci.txt"
full.loci.file <- "../vignettes/exampledata/fulldataset/full_population1_bgc_loci.txt"
bgc.genes <-
combine_bgc_output(results.dir = genesDIR,
prefix = prefix)
plot_traces(df.list = bgc.genes,
prefix = prefix,
plotDIR = plotDIR)
gene.outliers <-
get_bgc_outliers(
df.list = bgc.genes,
admix.pop = admixPop,
popmap = popmap,
genes.loci.file = genes.loci.file
)
gene.outliers <-
get_bgc_outliers(
df.list = bgc.genes,
admix.pop = admixPop,
popmap = popmap,
loci.file = genes.loci.file
)
bgc.full <-
combine_bgc_output(results.dir = fullDIR,
prefix = prefix)
plot_traces(
df.list = bgc.full,
prefix = paste0(prefix, "_full"),
plotDIR = plotDIR
)
full.outliers <-
get_bgc_outliers(
df.list = bgc.full,
admix.pop = admixPop,
popmap = popmap,
loci.file = full.loci.file
)
ab.range <-
data.frame(
"full.alpha" = c(
"min" = min(full.outliers[[1]]$alpha),
"max" = max(full.outliers[[1]]$alpha)
),
"full.beta" = c(
"min" = min(full.outliers[[1]]$beta),
"max" = max(full.outliers[[1]]$beta)
),
"genes.alpha" = c(
"min" = min(gene.outliers[[1]]$alpha),
"max" = max(gene.outliers[[1]]$alpha)
),
"genes.beta" = c(min(gene.outliers[[1]]$beta), max(gene.outliers[[1]]$beta))
)
write.table(
data.frame("Header" = rownames(ab.range), ab.range),
file = file.path(plotDIR, paste0(prefix, "_ab.ranges.csv")),
sep = ",",
row.names = F,
col.names = T,
quote = F
)
phiPlot(
outlier.list = gene.outliers,
popname = paste0(admixPop, " Genes"),
line.size = 0.35,
saveToFile = paste0(prefix, "_genes"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
phiPlot(
outlier.list = full.outliers,
popname = paste0(admixPop, " All"),
line.size = 0.2,
saveToFile = paste0(prefix, "_genome"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
alphaBetaPlot(
eatt.gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = eatt.prefix,
plotDIR = "../plots", padding = 0.2,
)
alphaBetaPlot(
gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = prefix,
plotDIR = "../plots", padding = 0.2,
)
alphaBetaPlot(
gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = prefix,
plotDIR = "./plots", padding = 0.2,
)
gff <- parseGFF(gff.filepath = gff)
scafInfoDIR <- "./scafInfo"
genes.annotated <-
join_bgc_gff(
prefix = prefix,
outlier.list = gene.outliers,
gff.data = gff,
scafInfoDIR = scafInfoDIR
)
ref.trans.info <-
plot_outlier_ideogram(
prefix = prefix,
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = FALSE
)
gene.size <- 4e6
other.size <- 1e6
ref.trans.info <-
plot_outlier_ideogram(
prefix = prefix,
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = FALSE
)
setwd("D:/scripts/ClinePlotR/scripts")
setwd("../../")
getwd()
library("ClinePlotR")
fullDIR <- "exampleData/bgc/bgc_outputFiles/fulldataset"
# output directory to save plots in; will create if doesn't exist
plotDIR <- "./plots"
# Directory with BGC output files; transcriptomic alignment
genesDIR <- "exampleData/bgc/bgc_outputFiles/genes"
# Directory with BGC output files; scaffold alignment
fullDIR <- "exampleData/bgc/bgc_outputFiles/fulldataset"
# PAFScaff output file; needed for ideogram
pafInfo  <-
"exampleData/PAFScaff/pafscaff_asm20_scafTrans_tscripta.scaffolds.tdt"
# prefix for BGC output files
prefix <- "eatt"
# admixed population from popmap file
admixPop <- "EATT"
# Path to population map (popmap) file
popmap <- "exampleData/popmaps/bgc/eatt.bgc.popmap_final.txt"
# File with locus names (transcriptomic alignment)
genes.loci.file <- "exampleData/bgc/bgc_lociFiles/genes/eatt_bgc_loci.txt"
# File with locus names (scaffold alignment)
full.loci.file <- "exampleData/bgc/bgc_lociFiles/fulldataset/eatt_bgc_loci.txt"
# Directory to save scaffold info files; Will create if doesnt't exist
scafInfoDIR <- "./scafInfo"
# Set size of heatmap bands on ideogram. Measured in nucleotide bases
# Strictly for better visualization. Can be adjusted as needed
gene.size <- 4e6 # known genes
other.size <- 1e6 # scaffold alignment
# GFF file is from the Terrapene mexicana triunguis scaffold-level genome
# It can be found at: https://www.ncbi.nlm.nih.gov/genome/?term=Terrapene
gff <- "exampleData/gff/genes_Terrapene.gff"
# Combine multiple independent BGC runs together
bgc.genes <-
combine_bgc_output(results.dir = genesDIR,
prefix = prefix)
# Plot the likelihood and parameter traces
plot_traces(df.list = bgc.genes,
prefix = prefix,
plotDIR = plotDIR)
# Detect BGC outliers for known genes
gene.outliers <-
get_bgc_outliers(
df.list = bgc.genes,
admix.pop = admixPop,
popmap = popmap,
loci.file = genes.loci.file
)
# Aggregate runs together
bgc.full <-
combine_bgc_output(results.dir = fullDIR,
prefix = prefix)
# Plot likelihood and parameter traces
plot_traces(
df.list = bgc.full,
prefix = paste0(prefix, "_full"),
plotDIR = plotDIR
)
# Detect outliers in scaffold alignment
full.outliers <-
get_bgc_outliers(
df.list = bgc.full,
admix.pop = admixPop,
popmap = popmap,
loci.file = full.loci.file
)
# Not ClinePlotR functions.
# This just saves the minimum and maximum alpha and beta outlier values
# Can be used to add to the legend
ab.range <-
data.frame(
"full.alpha" = c(
"min" = min(full.outliers[[1]]$alpha),
"max" = max(full.outliers[[1]]$alpha)
),
"full.beta" = c(
"min" = min(full.outliers[[1]]$beta),
"max" = max(full.outliers[[1]]$beta)
),
"genes.alpha" = c(
"min" = min(gene.outliers[[1]]$alpha),
"max" = max(gene.outliers[[1]]$alpha)
),
"genes.beta" = c(min(gene.outliers[[1]]$beta), max(gene.outliers[[1]]$beta))
)
# Write alpha beta ranges to file.
write.table(
data.frame("Header" = rownames(ab.range), ab.range),
file = file.path(plotDIR, paste0(prefix, "_ab.ranges.csv")),
sep = ",",
row.names = F,
col.names = T,
quote = F
)
# Make the phi plot for the transcriptomic alignment
# Any of these parameters can be adjusted as needed.
# Here, both.outlier.tests is FALSE
# This means that outliers are flagged if they are significant in either method
phiPlot(
outlier.list = gene.outliers,
popname = paste0(admixPop, " Genes"),
line.size = 0.35,
saveToFile = paste0(prefix, "_genes"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
# This means that both outlier tests have to be significant to flag the outlier
phiPlot(
outlier.list = gene.outliers,
popname = paste0(admixPop, " Genes"),
line.size = 0.35,
saveToFile = paste0(prefix, "_genes_bothOutlierTests"),
plotDIR = plotDIR,
both.outlier.tests = TRUE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
# Phi plot for scaffold alignment
phiPlot(
outlier.list = full.outliers,
popname = paste0(admixPop, " All"),
line.size = 0.2,
saveToFile = paste0(prefix, "_scaffold"),
plotDIR = plotDIR,
both.outlier.tests = FALSE,
neutral.color = "gray60",
alpha.color = "cornflowerblue",
beta.color = "firebrick",
both.color = "purple",
hist.y.origin = 1.2,
hist.height = 1.8,
margins = c(160.0, 5.5, 5.5, 5.5),
hist.binwidth = 0.05
)
# alphabetaplot
# 2-D contour plot with hulls for outliers
alphaBetaPlot(
gene.outliers,
alpha.color = "cornflowerblue",
beta.color = "orange",
neutral.color = "gray60",
saveToFile = prefix,
plotDIR = "./plots",
padding = 0.2,
)
gff <- parseGFF(gff.filepath = gff)
# Get annotation info for BGC outliers (transcriptomic alignment)
genes.annotated <-
join_bgc_gff(
prefix = prefix,
outlier.list = gene.outliers,
gff.data = gff,
scafInfoDIR = scafInfoDIR
)
# Plot ideogram
# Here, both.outlier.tests is FALSE
# This means that the SNP is an outlier if flagged by either outlier test
ref.trans.info <-
plot_outlier_ideogram(
prefix = paste0(prefix, "_eitherOutlierTests"),
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = FALSE
)
# Plot ideogram. this time, both.outlier.tests = TRUE
# This means that both outlier tests have to be significant to flag as outlier
# More conservative
ref.trans.info_bothOutlierTests <-
plot_outlier_ideogram(
prefix = paste0(prefix, "_bothOutlierTests"),
outliers.genes = genes.annotated,
outliers.full.scaffolds = full.outliers,
pafInfo = pafInfo,
plotDIR = plotDIR,
gene.size = gene.size,
other.size = other.size,
both.outlier.tests = TRUE
)
# Write annotation information to file so it can be used later
write.table(
genes.annotated,
file = file.path(plotDIR, paste0(prefix, "_genesAnnotated.csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
# Write annotation information to file so it can be used later
write.table(
ref.trans.info,
file = file.path(plotDIR, paste0(prefix, "_refTransInfo.csv")),
quote = TRUE,
row.names = FALSE,
col.names = TRUE,
sep = ","
)
library("ClinePlotR")
getwd()
# Set working directory here
# Mean annual solar radiation; https://worldclim.org
setwd("exampleData/ENMeval_bioclim/rasterLayers/original/wc2.1_30s_srad/")
library("raster")
library("rgdal")
# Load into raster stack
solar.files <- list.files(pattern = "*.tif", full.names = TRUE)
solar.rad <- raster::stack(solar.files)
# Wind speed for each of 12 months; found at https://worldclim.org;
setwd("exampleData/ENMeval_bioclim/rasterLayers/original/wc2.1_30s_wind/")
setwd("../wc2.1_30s_wind/")
wind.files <- list.files(pattern = "*.tif", full.names = TRUE)
wind <- raster::stack(wind.files)
# Calculate annual means
solar.mean <- raster::calc(solar.rad, fun = mean, na.rm = TRUE)
wind.mean <- raster::calc(wind, fun = mean, na.rm = TRUE)
setwd("../../../../../")
samples <-
read.csv(
"exampleData/ENMeval_bioclim/localityInfo/sample_localities_maxent_southeast.csv",
header = TRUE,
stringsAsFactors = FALSE
)
getwd()
library("ClinePlotR")
rasterDIR <- "exampleData/ENMeval_bioclim/"
dataDIR <- "exampleData/introgress"
envList <- readRDS("exampleData/ENMeval_bioclim/Robjects/envList.rds")
rasterPoint.list <- extractPointValues(envList)
eatt <- runIntrogress(
p1.file = file.path(dataDIR, "inputFiles", "EATT_p1data.txt"),
p2.file = file.path(dataDIR, "inputFiles", "EATT_p2data.txt"),
admix.file = file.path(dataDIR, "inputFiles", "EATT_admix.txt"),
loci.file = file.path(dataDIR, "inputFiles", "EATT_loci.txt"),
clineLabels = c("EA", "Het", "TT"),
minDelt = 0.8,
prefix = "EATT",
outputDIR = file.path(dataDIR, "outputFiles"),
sep = "\t",
fixed = FALSE,
pop.id = FALSE,
ind.id = FALSE
)
rasterPoint.list.subset <-
lapply(rasterPoint.list,
subsetIndividuals,
file.path(dataDIR, "inputFiles", "eatt_inds.txt"))
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "eatt"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "clines"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
getwd()
# Correlate genomic clines/hybrid index with environment/lat/lon
# Can use different correlation methods. E.g. pearson or kendall
clinesXenvironment(
clineList = eatt,
rasterPointValues = rasterPoint.list.subset,
clineLabels = c("EA", "Het", "TT"),
outputDIR = file.path(dataDIR, "outputFiles", "clines"),
clineMethod = "permutation",
prefix = "eatt",
cor.method = "spearman"
)
warnings()
setwd("ClinePlotR/")
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::clean_vignettes()
setwd("D:/scripts/ClinePlotR")
devtools::clean_vignettes()
devtools::clean_vignettes("."
)
install.packages("attachment")
install.packages("packrat")
packrat::unused_packages(project = ".")
packrat::unused_packages(project = ".", lib.loc = "bayestestR")
